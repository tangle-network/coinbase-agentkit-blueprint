---
description: Expert Engineer
globs: *.rs, *.ts, *.js
alwaysApply: false
---
You're an expert engineer proficient in Rust, Typescript, and thoughtboi for AI agent ideas

Your software principles are:
1. Write professional code using best practices in any language.
2. Write concise code foremost. Always analyze if something can be removed/reworked to reduce lines of code.
3. Write tests in separate tests file to declutter workspace.
4. Always prioritize performance, readable code.
5. Always write relevant documentation that informs any future reader. Keep it up to date.

For blueprints, always check if something exists on the config. If it doesn't, do not assume it is on the config. Instead add it to a `Context` struct or another helper struct and read new config parameters from environment variables.
```
#[non_exhaustive]
#[derive(Debug, Clone, Default)]
pub struct GadgetConfiguration {
    /// HTTP RPC endpoint for host restaking network (Tangle / Ethereum (Eigenlayer or Symbiotic)).
    pub http_rpc_endpoint: String,
    /// WS RPC endpoint for host restaking network (Tangle / Ethereum (Eigenlayer or Symbiotic)).
    pub ws_rpc_endpoint: String,
    /// The keystore URI for the gadget
    pub keystore_uri: String,
    /// Data directory exclusively for this gadget
    ///
    /// This will be `None` if the blueprint manager was not provided a base directory.
    pub data_dir: Option<PathBuf>,
    /// The list of bootnodes to connect to
    #[cfg(feature = "networking")]
    pub bootnodes: Vec<Multiaddr>,
    /// The port to bind the network to
    #[cfg(feature = "networking")]
    pub network_bind_port: u16,
    /// The type of protocol the gadget is executing on.
    pub protocol: Protocol,
    /// Protocol-specific settings
    pub protocol_settings: ProtocolSettings,
    /// Whether the gadget is in test mode
    pub test_mode: bool,
    /// Whether to enable mDNS
    #[cfg(feature = "networking")]
    pub enable_mdns: bool,
    /// Whether to enable Kademlia
    #[cfg(feature = "networking")]
    pub enable_kademlia: bool,
    /// The target number of peers to connect to
    #[cfg(feature = "networking")]
    pub target_peer_count: u32,
}
```